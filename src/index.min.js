(function(){window._package_settings={keyValues:!1,throwError:!1,onError:function(){}};var win=window._package_settings;function fetch(e){var o={on:function(e){r=e}},r=function(){};return startWebRequest(e,function(e,o,n){200!==e?r(!1,o,e):r("application/json"===o?JSON.parse(n):n,o,200)}),o}var windowbuild=["sem","base64"];function handleError(e){if(!0===win.throwError)throw"[PKG] "+e;"console"===win.throwError?console.log("[PKG] "+e):win.onError("[PKG] "+e)}var PKGS={};window.require=function(pkg,version){version&&/^\d{1,2}\.\d{1,2}\.\d{1,2}$/.test(version)||(version="latest");var id=pkg+":"+version,reqPkg;return PKGS[id]?PKGS[id]:(reqPkg={__valid:!1,__loaded:!1,onload:function(){}},PKGS[id]=reqPkg,win.keyValues?getKeyValue("package_href_"+id,function(e){e?load(e):webRequest(!0)}):webRequest(),reqPkg);function evaluatePkg(code){var packageObject=eval(code),prop;for(prop in packageObject)reqPkg[prop]=packageObject[prop];reqPkg.onload()}function load(r,t){fetch(r).on(function(e,o,n){e?(reqPkg.__valid=!0,reqPkg.__loaded=!0,t&&setKeyValue("package_href_"+id,r),evaluatePkg(e)):(delete PKGS[id],handleError(404===n?"Package "+pkg+" does not exist.":"raw.githubusercontent.com responded with a status code of "+n+"."))})}function webRequest(i){"latest"!==version?fetch("https://api.github.com/repos/IMF777/cdo-pkg/commits?path=packages/"+pkg+"/src/index.min.js").on(function(e,o,n){if(e)if(0!==e.length){for(var r=!1,t=0;t<e.length;t++){var a=e[t];if(a.commit.message.substring(0,version.length)===version){r=!0,reqPkg.__valid=!0,load("https://raw.githubusercontent.com/IMF777/cdo-pkg/"+a.sha+"/packages/"+pkg+"/src/index.min.js",i);break}}r||handleError("Version "+version+" does not exist in package "+pkg+".")}else handleError("Package "+pkg+" does not exist.");else handleError("api.github.com reponded with a status code of "+n+".")}):load("https://raw.githubusercontent.com/IMF777/cdo-pkg/main/packages/"+pkg+"/src/index.min.js",i)}},window.package=function(o,e){var n,r,t,a={onload:function(){}};return Array.isArray(o)?(n=o.length,r=0,o.forEach(function(e){e=e.split(":"),package(e[0],e[1]).onload=function(){++r===n&&a.onload()}})):(t=require(o,e)).onload=function(){if(delete t.onload,delete t.__valid,delete t.__loaded,-1<windowbuild.indexOf(o)){for(var e in t)window[e]=t[e];a.onload()}else handleError("Package "+o+" cannot be imported globally. Use require() to import this package.")},a}})();
function Settings(e){window._package_settings.keyValues=e.keyValues,window._package_settings.throwError=e.throwError,window._package_settings.onError=e.onError||function(){}}
function CheckForUpdate(r){startWebRequest("https://raw.githubusercontent.com/IMF777/cdo-pkg/main/meta.json",function(e,o,n){n=JSON.parse(n);"1.1.0"!=n.version&&(n="[PKG] Newer version "+n.version+" available",r?r(!0,n):console.log(n))})}
